{"version":3,"file":"parseAndCheckHttpResponse.js","sourceRoot":"","sources":["../../../src/link/http/parseAndCheckHttpResponse.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,gBAAgB,EAAE,MAAM,UAAU,CAAC;AAEpC,IAAA,cAAc,GAAK,MAAM,CAAC,SAAS,eAArB,CAAsB;AAQ5C,MAAM,UAAU,yBAAyB,CACvC,UAAmC;IAEnC,OAAO,UAAC,QAAkB;QACxB,OAAO,CAAC,GAAG,CAAC,oBAAkB,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAG,CAAC,CAAC;QAE1D,OAAO,QAAQ;aACV,IAAI,EAAE;aACN,IAAI,CAAC,UAAA,QAAQ;YACZ,IAAI;gBACF,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;aAC7B;YAAC,OAAO,GAAG,EAAE;gBACZ,IAAM,UAAU,GAAG,GAAuB,CAAC;gBAC3C,UAAU,CAAC,IAAI,GAAG,kBAAkB,CAAC;gBACrC,UAAU,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBAC/B,UAAU,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;gBACxC,UAAU,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBAC/B,MAAM,UAAU,CAAC;aAClB;QACH,CAAC,CAAC;aACD,IAAI,CAAC,UAAC,MAAW;YAChB,IAAI,QAAQ,CAAC,MAAM,IAAI,GAAG,EAAE;gBAE1B,gBAAgB,CACZ,QAAQ,EACR,MAAM,EACN,mDAAiD,QAAQ,CAAC,MAAQ,CACrE,CAAC;aACH;YAED,IACI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC;gBACtB,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC;gBACpC,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,EACxC;gBAEA,gBAAgB,CACZ,QAAQ,EACR,MAAM,EACN,6CACI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC;oBACrB,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,aAAa,EAAhB,CAAgB,CAAC;oBACxC,CAAC,CAAC,UAAU,CAAC,aAAa,QAC9B,CACP,CAAC;aACH;YACD,OAAO,MAAM,CAAC;QAChB,CAAC,CAAC;aACD,KAAK,CAAC,UAAA,GAAG;YACR,OAAO,CAAC,GAAG,CAAC,+BAA6B,GAAK,CAAC,CAAC;YAEhD,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAA;IACR,CAAC,CAAA;AACH,CAAC","sourcesContent":["import { Operation } from '../core';\nimport { throwServerError } from '../utils';\n\nconst { hasOwnProperty } = Object.prototype;\n\nexport type ServerParseError = Error & {\n  response: Response;\n  statusCode: number;\n  bodyText: string;\n};\n\nexport function parseAndCheckHttpResponse(\n  operations: Operation | Operation[],\n) {\n  return (response: Response) => {\n    console.log(`### Response = ${JSON.stringify(response)}`);\n\n    return response\n        .text()\n        .then(bodyText => {\n          try {\n            return JSON.parse(bodyText);\n          } catch (err) {\n            const parseError = err as ServerParseError;\n            parseError.name = 'ServerParseError';\n            parseError.response = response;\n            parseError.statusCode = response.status;\n            parseError.bodyText = bodyText;\n            throw parseError;\n          }\n        })\n        .then((result: any) => {\n          if (response.status >= 300) {\n            // Network error\n            throwServerError(\n                response,\n                result,\n                `Response not successful: Received status code ${response.status}`,\n            );\n          }\n\n          if (\n              !Array.isArray(result) &&\n              !hasOwnProperty.call(result, 'data') &&\n              !hasOwnProperty.call(result, 'errors')\n          ) {\n            // Data error\n            throwServerError(\n                response,\n                result,\n                `Server response was missing for query '${\n                    Array.isArray(operations)\n                        ? operations.map(op => op.operationName)\n                        : operations.operationName\n                }'.`,\n            );\n          }\n          return result;\n        })\n        .catch(err => {\n          console.log(`### Response error, err = ${err}`);\n\n          return Promise.reject(err);\n        })\n  }\n}\n"]}